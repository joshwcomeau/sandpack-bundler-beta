{"version":3,"sources":["webpack:///./src/sandbox/eval/transpilers/vue/v2/style-compiler/plugins/trim.js","webpack:///./src/sandbox/eval/transpilers/vue/v2/style-compiler/plugins/scope-id.js","webpack:///./src/sandbox/eval/transpilers/vue/v2/style-compiler/loader.ts","webpack:///./src/sandbox/eval/utils/is-dependency-path.ts"],"names":["postcss","require","plugin","opts","css","walk","node","type","raws","before","after","selectorParser","root","keyframes","Object","create","each","rewriteSelector","selector","selectors","n","value","spaces","next","remove","insertAfter","attribute","id","process","result","name","params","keys","length","walkDecls","decl","test","prop","split","map","v","trim","join","vals","concat","slice","resolveCSSFile","loaderContext","path","basePath","a","isDependencyPath","resolveTranspiledModuleAsync","pkgJson","parsedPkg","JSON","parse","module","code","style","fullPath","charAt","query","options","vueOptions","__vueOptions__","vue","plugins","postcssImportPlugin","resolve","replace","load","filename","tModule","to","from","scoped","push","scopeId","sourceMap","cssSourceMap","inline","annotation","postcssResult","messages","Promise","all","m","addDependency","file","toJSON","transpiledCode","p"],"mappings":"wmBAIeA,EAHCC,EAAQ,6CAGDC,OAAO,QAAQ,SAASC,GAC7C,OAAO,SAASC,GACdA,EAAIC,MAAK,SAASC,GACE,SAAdA,EAAKC,MAAiC,WAAdD,EAAKC,OAC/BD,EAAKE,KAAKC,OAASH,EAAKE,KAAKE,MAAQ,aCPzCV,EAAUC,EAAQ,6CAClBU,EAAiBV,EAAQ,wDAEdD,IAAQE,OAAO,UAAU,SAASC,GAC/C,OAAO,SAASS,GACd,IAAIC,EAAYC,OAAOC,OAAO,MAE9BH,EAAKI,MAAK,SAASC,EAAgBX,GAC5BA,EAAKY,SAYVZ,EAAKY,SAAWP,GAAe,SAASQ,GACtCA,EAAUH,MAAK,SAASE,GACtB,IAAIZ,EAAO,KACXY,EAASF,MAAK,SAASI,GAErB,GAAe,eAAXA,EAAEb,MAAqC,QAAZa,EAAEC,MAG/B,OAFAD,EAAEC,MAAQ,IACVD,EAAEE,OAAOb,OAASW,EAAEE,OAAOZ,MAAQ,IAC5B,EAGT,GAAe,QAAXU,EAAEb,MAA8B,WAAZa,EAAEC,MAAoB,CAC5C,IAAIE,EAAOH,EAAEG,OAKb,MAJkB,eAAdA,EAAKhB,MAAwC,MAAfgB,EAAKF,OACrCE,EAAKC,SAEPJ,EAAEI,UACK,EAEM,WAAXJ,EAAEb,MAAgC,eAAXa,EAAEb,OAC3BD,EAAOc,MAGXF,EAASO,YACPnB,EACAK,EAAee,UAAU,CACvBA,UAAWvB,EAAKwB,YAIrBC,QAAQtB,EAAKY,UAAUW,OAxCN,WAAdvB,EAAKC,OACW,UAAdD,EAAKwB,KACPxB,EAAKU,KAAKC,GACa,cAAdX,EAAKwB,OAEdjB,EAAUP,EAAKyB,QAAUzB,EAAKyB,OAASzB,EAAKyB,OAAS,IAAM5B,EAAKwB,QA0CpEb,OAAOkB,KAAKnB,GAAWoB,QACzBrB,EAAKsB,WAAU,SAAAC,GAET,oBAAoBC,KAAKD,EAAKE,QAChCF,EAAKd,MAAQc,EAAKd,MACfiB,MAAM,KACNC,KAAI,SAAAC,GAAC,OAAI3B,EAAU2B,EAAEC,SAAWD,EAAEC,UAClCC,KAAK,MAGN,eAAeN,KAAKD,EAAKE,QAC3BF,EAAKd,MAAQc,EAAKd,MACfiB,MAAM,KACNC,KAAI,SAAAC,GACH,IAAIG,EAAOH,EAAEF,MAAM,OACfR,EAAOa,EAAK,GAChB,OAAI9B,EAAUiB,GACL,CAACjB,EAAUiB,IAAOc,OAAOD,EAAKE,MAAM,IAAIH,KAAK,KAE7CF,KAGVE,KAAK,a,0kBCtEHI,E,0EAAf,WACEC,EACAC,EACAC,GAHF,qBAAAC,EAAA,0DAKuBC,YAAiBH,GALxC,0CAU4BD,EAAcK,6BAClCV,eAAKM,EAAM,iBAXnB,UAUYK,EAVZ,SAaYC,EAAYC,KAAKC,MAAMH,EAAQI,OAAOC,OAE9BC,MAfpB,wBAgBcC,EAAWlB,eAAKM,EAAMM,EAAUK,OAhB9C,kBAkBeZ,EAAcK,6BAA6BQ,IAlB1D,2FAwBWb,EAAcK,6BAA6BJ,IAxBtD,eA2BQY,EAA8B,MAAnBZ,EAAKa,OAAO,GAAab,EAAON,eAAKO,EAAUD,GA3BlE,kBA4BSD,EAAcK,6BAA6BQ,IA5BpD,2D,sBA+Be,wD,oCAAA,WACbF,EACAX,GAFa,2BAAAG,EAAA,6DAIPY,EAAQf,EAAcgB,SAExBC,EAAajB,EAAcgB,QAAQE,kBAGrCD,EAAU,KACLjB,EAAcgB,QAAQG,MAKvBC,EAAU,CACdC,IAAoB,CAClBC,QAAQ,WAAD,oBAAE,WAAO1C,EAAYf,GAAnB,eAAAsC,EAAA,+EAEgBJ,EACnBC,EACApB,EAAG2C,QAAQ,KAAM,IACjB1D,GALG,cAECiB,EAFD,yBAQEA,EAAO4B,OAAOT,MARhB,yDAUE,MAVF,yDAAF,qDAAC,GAaRuB,KAAK,WAAD,oBAAE,WAAOC,GAAP,eAAAtB,EAAA,sEACkBH,EAAcK,6BAClCoB,GAFE,cACEC,EADF,yBAKGA,EAAQhB,OAAOC,MALlB,2CAAF,mDAAC,KAQPjB,GAGIsB,EAA0B,CAC9BW,GAAI3B,EAAcC,KAClB2B,KAAM5B,EAAcC,MAIlBc,EAAMc,QACRT,EAAQU,KAAKC,EAAQ,CAAEnD,GAAImC,EAAMnC,MAKjCoB,EAAcgC,YACc,IAA5Bf,EAAWgB,eAGXjB,EAAQxB,IAAM,CACZ0C,QAAQ,EACRC,YAAY,IA3DH,SAiEelF,IAAQmE,GAASvC,QAAQ8B,GAAQ,GAAIK,GAjEpD,YAiEPoB,EAjEO,QAmEKC,SAnEL,wBAoELA,EAAWD,EAAcC,SApEpB,UAqELC,QAAQC,IACZF,EAAS7C,KAAI,SAAAgD,GACX,MAAe,eAAXA,EAAEhF,KACGwC,EAAcyC,cAAcD,EAAEE,MAEhCJ,QAAQhB,cA1ER,eA+EP9B,EAAM4C,EAAc5C,KAAO4C,EAAc5C,IAAImD,SA/EtC,kBAgFN,CAAEC,eAAgBR,EAAc/E,IAAK2E,UAAWxC,IAhF1C,6C,sGCzCf,kCAAO,IAAMY,EAAmB,SAACyC,GAAD,MAAe,eAAexD,KAAKwD,K","file":"static/js/vue-style-compiler.ca26539bf.chunk.js","sourcesContent":["/* eslint-disable */\nconst postcss = require('postcss');\n\n// eslint-disable-next-line no-unused-vars\nexport default postcss.plugin('trim', function(opts) {\n  return function(css) {\n    css.walk(function(node) {\n      if (node.type === 'rule' || node.type === 'atrule') {\n        node.raws.before = node.raws.after = '\\n';\n      }\n    });\n  };\n});\n","/* eslint-disable */\nvar postcss = require('postcss');\nvar selectorParser = require('postcss-selector-parser');\n\nexport default postcss.plugin('add-id', function(opts) {\n  return function(root) {\n    var keyframes = Object.create(null);\n\n    root.each(function rewriteSelector(node) {\n      if (!node.selector) {\n        // handle media queries\n        if (node.type === 'atrule') {\n          if (node.name === 'media') {\n            node.each(rewriteSelector);\n          } else if (node.name === 'keyframes') {\n            // register keyframes\n            keyframes[node.params] = node.params = node.params + '-' + opts.id;\n          }\n        }\n        return;\n      }\n      node.selector = selectorParser(function(selectors) {\n        selectors.each(function(selector) {\n          var node = null;\n          selector.each(function(n) {\n            // \">>>\" combinator\n            if (n.type === 'combinator' && n.value === '>>>') {\n              n.value = ' ';\n              n.spaces.before = n.spaces.after = '';\n              return false;\n            }\n            // /deep/ alias for >>>, since >>> doesn't work in SASS\n            if (n.type === 'tag' && n.value === '/deep/') {\n              var next = n.next();\n              if (next.type === 'combinator' && next.value === ' ') {\n                next.remove();\n              }\n              n.remove();\n              return false;\n            }\n            if (n.type !== 'pseudo' && n.type !== 'combinator') {\n              node = n;\n            }\n          });\n          selector.insertAfter(\n            node,\n            selectorParser.attribute({\n              attribute: opts.id,\n            })\n          );\n        });\n      }).process(node.selector).result;\n    });\n\n    // If keyframes are found in this <style>, find and rewrite animation names\n    // in declarations.\n    // Caveat: this only works for keyframes and animation rules in the same\n    // <style> element.\n    if (Object.keys(keyframes).length) {\n      root.walkDecls(decl => {\n        // individual animation-name declaration\n        if (/-?animation-name$/.test(decl.prop)) {\n          decl.value = decl.value\n            .split(',')\n            .map(v => keyframes[v.trim()] || v.trim())\n            .join(',');\n        }\n        // shorthand\n        if (/-?animation$/.test(decl.prop)) {\n          decl.value = decl.value\n            .split(',')\n            .map(v => {\n              var vals = v.split(/\\s+/);\n              var name = vals[0];\n              if (keyframes[name]) {\n                return [keyframes[name]].concat(vals.slice(1)).join(' ');\n              } else {\n                return v;\n              }\n            })\n            .join(',');\n        }\n      });\n    }\n  };\n});\n","import postcss, { ProcessOptions } from 'postcss';\nimport postcssImportPlugin from 'postcss-import';\nimport { join } from 'path';\nimport { isDependencyPath } from 'sandbox/eval/utils/is-dependency-path';\nimport { TranspiledModule } from 'sandpack-core';\nimport { LoaderContext } from 'sandpack-core/lib/transpiled-module';\n\nimport trim from './plugins/trim';\nimport scopeId from './plugins/scope-id';\n\nasync function resolveCSSFile(\n  loaderContext: LoaderContext,\n  path: string,\n  basePath: string\n): Promise<TranspiledModule> {\n  const isDependency = isDependencyPath(path);\n\n  if (isDependency) {\n    // First try to resolve the package.json, in case it has a style field\n    try {\n      const pkgJson = await loaderContext.resolveTranspiledModuleAsync(\n        join(path, 'package.json')\n      );\n      const parsedPkg = JSON.parse(pkgJson.module.code);\n\n      if (parsedPkg.style) {\n        const fullPath = join(path, parsedPkg.style);\n\n        return loaderContext.resolveTranspiledModuleAsync(fullPath);\n      }\n    } catch (e) {\n      /* Move to step 2 */\n    }\n\n    return loaderContext.resolveTranspiledModuleAsync(path);\n  }\n\n  const fullPath = path.charAt(0) === '/' ? path : join(basePath, path);\n  return loaderContext.resolveTranspiledModuleAsync(fullPath);\n}\n\nexport default async function (\n  code: string,\n  loaderContext: LoaderContext\n): Promise<{ transpiledCode: string; sourceMap: any }> {\n  const query = loaderContext.options;\n\n  let vueOptions = loaderContext.options.__vueOptions__;\n\n  if (!vueOptions) {\n    vueOptions = {\n      ...loaderContext.options.vue,\n    };\n  }\n\n  // TODO autoprefixer\n  const plugins = [\n    postcssImportPlugin({\n      resolve: async (id: string, root: string) => {\n        try {\n          const result = await resolveCSSFile(\n            loaderContext,\n            id.replace(/^~/, ''),\n            root\n          );\n\n          return result.module.path;\n        } catch (e) {\n          return null;\n        }\n      },\n      load: async (filename: string) => {\n        const tModule = await loaderContext.resolveTranspiledModuleAsync(\n          filename\n        );\n\n        return tModule.module.code;\n      },\n    }),\n    trim,\n  ];\n\n  const options: ProcessOptions = {\n    to: loaderContext.path,\n    from: loaderContext.path,\n  };\n\n  // add plugin for vue-loader scoped css rewrite\n  if (query.scoped) {\n    plugins.push(scopeId({ id: query.id }));\n  }\n\n  // source map\n  if (\n    loaderContext.sourceMap &&\n    vueOptions.cssSourceMap !== false\n    // !loaderContext.map\n  ) {\n    options.map = {\n      inline: false,\n      annotation: false,\n      // prev: loaderContext.map,\n    };\n  }\n\n  // Explicitly give undefined if code is null, otherwise postcss crashses\n  const postcssResult = await postcss(plugins).process(code || '', options);\n\n  if (postcssResult.messages) {\n    const messages = postcssResult.messages as any[];\n    await Promise.all(\n      messages.map(m => {\n        if (m.type === 'dependency') {\n          return loaderContext.addDependency(m.file);\n        }\n        return Promise.resolve();\n      })\n    );\n  }\n\n  const map = postcssResult.map && postcssResult.map.toJSON();\n  return { transpiledCode: postcssResult.css, sourceMap: map };\n}\n","export const isDependencyPath = (p: string) => /^(\\w|@\\w|@-)/.test(p);\n"],"sourceRoot":""}
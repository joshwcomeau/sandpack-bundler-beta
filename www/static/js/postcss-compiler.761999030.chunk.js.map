{"version":3,"sources":["webpack:///./src/sandbox/eval/transpilers/postcss/loader.ts","webpack:///./src/sandbox/eval/utils/is-dependency-path.ts"],"names":["resolveCSSFile","loaderContext","path","basePath","a","isDependencyPath","resolveTranspiledModuleAsync","join","pkgJson","parsedPkg","JSON","parse","module","code","style","fullPath","charAt","plugins","postcssImportPlugin","resolve","id","root","result","load","filename","tModule","options","to","from","map","inline","annotation","postcss","process","undefined","messages","Promise","all","m","type","addDependency","file","toJSON","transpiledCode","css","sourceMap","p","test"],"mappings":"qhBAOeA,E,0EAAf,WACEC,EACAC,EACAC,GAHF,qBAAAC,EAAA,0DAKuBC,YAAiBH,GALxC,0CAU4BD,EAAcK,6BAClCC,eAAKL,EAAM,iBAXnB,UAUYM,EAVZ,SAaYC,EAAYC,KAAKC,MAAMH,EAAQI,OAAOC,OAE9BC,MAfpB,wBAgBcC,EAAWR,eAAKL,EAAMO,EAAUK,OAhB9C,kBAkBeb,EAAcK,6BAA6BS,IAlB1D,2FAwBWd,EAAcK,6BAA6BJ,IAxBtD,eA2BQa,EAA8B,MAAnBb,EAAKc,OAAO,GAAad,EAAOK,eAAKJ,EAAUD,GA3BlE,kBA4BSD,EAAcK,6BAA6BS,IA5BpD,2D,0DA+Be,WACbF,EACAZ,GAFa,uBAAAG,EAAA,6DAIPa,EAAU,CACdC,IAAoB,CAClBC,QAAQ,WAAD,oBAAE,WAAOC,EAAYC,GAAnB,eAAAjB,EAAA,+EAEgBJ,EAAeC,EAAemB,EAAIC,GAFlD,cAECC,EAFD,yBAIEA,EAAOV,OAAOV,MAJhB,yDAME,MANF,yDAAF,qDAAC,GASRqB,KAAK,WAAD,oBAAE,WAAOC,GAAP,eAAApB,EAAA,sEACkBH,EAAcK,6BAClCkB,GAFE,cACEC,EADF,yBAKGA,EAAQb,OAAOC,MALlB,2CAAF,mDAAC,MAUHa,EAA0B,CAC9BC,GAAI1B,EAAcC,KAClB0B,KAAM3B,EAAcC,KACpB2B,IAAK,CACHC,QAAQ,EACRC,YAAY,IA9BH,SAmCQC,IAAQf,GAASgB,QAC3B,OAATpB,OAAgBqB,EAAYrB,EAC5Ba,GArCW,YAmCPJ,EAnCO,QAuCFa,SAvCE,uBAwCLA,EAAWb,EAAOa,SAxCb,SAyCLC,QAAQC,IACZF,EAASN,IAAT,+BAAa,WAAMS,GAAN,SAAAlC,EAAA,yDACI,eAAXkC,EAAEC,KADK,gCAEHtC,EAAcuC,cAAcF,EAAEG,MAF3B,2CAAb,wDA1CS,cAkDPZ,EAAMP,EAAOO,KAAOP,EAAOO,IAAIa,SAlDxB,kBAoDN,CAAEC,eAAgBrB,EAAOsB,IAAKC,UAAWhB,IApDnC,6C,sBAAA,yD,8ECtCf,kCAAO,IAAMxB,EAAmB,SAACyC,GAAD,MAAe,eAAeC,KAAKD,K","file":"static/js/postcss-compiler.761999030.chunk.js","sourcesContent":["import postcss, { ProcessOptions } from 'postcss';\nimport postcssImportPlugin from 'postcss-import';\nimport { join } from 'path';\nimport { isDependencyPath } from 'sandbox/eval/utils/is-dependency-path';\n\nimport { LoaderContext, TranspiledModule } from 'sandpack-core';\n\nasync function resolveCSSFile(\n  loaderContext: LoaderContext,\n  path: string,\n  basePath: string\n): Promise<TranspiledModule> {\n  const isDependency = isDependencyPath(path);\n\n  if (isDependency) {\n    // First try to resolve the package.json, in case it has a style field\n    try {\n      const pkgJson = await loaderContext.resolveTranspiledModuleAsync(\n        join(path, 'package.json')\n      );\n      const parsedPkg = JSON.parse(pkgJson.module.code);\n\n      if (parsedPkg.style) {\n        const fullPath = join(path, parsedPkg.style);\n\n        return loaderContext.resolveTranspiledModuleAsync(fullPath);\n      }\n    } catch (e) {\n      /* Move to step 2 */\n    }\n\n    return loaderContext.resolveTranspiledModuleAsync(path);\n  }\n\n  const fullPath = path.charAt(0) === '/' ? path : join(basePath, path);\n  return loaderContext.resolveTranspiledModuleAsync(fullPath);\n}\n\nexport default async function (\n  code: string,\n  loaderContext: LoaderContext\n): Promise<{ transpiledCode: string; sourceMap: any }> {\n  const plugins = [\n    postcssImportPlugin({\n      resolve: async (id: string, root: string) => {\n        try {\n          const result = await resolveCSSFile(loaderContext, id, root);\n\n          return result.module.path;\n        } catch (e) {\n          return null;\n        }\n      },\n      load: async (filename: string) => {\n        const tModule = await loaderContext.resolveTranspiledModuleAsync(\n          filename\n        );\n\n        return tModule.module.code;\n      },\n    }),\n  ];\n\n  const options: ProcessOptions = {\n    to: loaderContext.path,\n    from: loaderContext.path,\n    map: {\n      inline: true,\n      annotation: true,\n    },\n  };\n\n  // Explicitly give undefined if code is null, otherwise postcss crashes\n  const result = await postcss(plugins).process(\n    code === null ? undefined : code,\n    options\n  );\n  if (result.messages) {\n    const messages = result.messages as any[];\n    await Promise.all(\n      messages.map(async m => {\n        if (m.type === 'dependency') {\n          await loaderContext.addDependency(m.file);\n        }\n      })\n    );\n  }\n\n  const map = result.map && result.map.toJSON();\n\n  return { transpiledCode: result.css, sourceMap: map };\n}\n","export const isDependencyPath = (p: string) => /^(\\w|@\\w|@-)/.test(p);\n"],"sourceRoot":""}
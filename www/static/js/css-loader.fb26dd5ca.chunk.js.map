{"version":3,"sources":["webpack:///./src/sandbox/eval/transpilers/vue/v2/css-loader/client/css-base.js","webpack:///./src/sandbox/eval/transpilers/vue/v2/css-loader/get-modules.ts","webpack:///./src/sandbox/eval/transpilers/vue/v2/css-loader/loader.ts"],"names":["module","exports","core","code","loaderContext","a","then","x","default","Core","load","path","dependencyPath","addDependency","tModule","resolveTranspiledModule","source","compiledCode","injectableSource","exportTokens","css","CSSBasePath","transpile","content","emitModule","CSSBaseRaw","result","options","modules","getModules","JSON","stringify","Promise","resolve","transpiledCode"],"mappings":"mLAAAA,EAAOC,QAAU,k9E,qXCEbC,EAAO,KAEX,iCAAe,WAAOC,EAAcC,GAArB,qBAAAC,EAAA,yDACRH,EADQ,gCAEQ,sKAEjBI,MAAK,SAAAC,GAAC,OAAIA,EAAEC,WAJH,OAELC,EAFK,OAMXP,EAAO,IAAIO,EANA,uBASoCP,EAAKQ,KACpDP,EACAC,EAAcO,KAFiC,+BAG/C,WAAOC,GAAP,eAAAP,EAAA,sEACQD,EAAcS,cAAcD,GADpC,cAGQE,EAAUV,EAAcW,wBAAwBH,GAHxD,kBAKSE,EAAQE,OAASF,EAAQE,OAAOC,aAAeH,EAAQd,OAAOG,MALvE,2CAH+C,uDATpC,uBASLe,EATK,EASLA,iBAAkBC,EATb,EASaA,aATb,kBAqBN,CACLC,IAAKF,EACLC,iBAvBW,4CAAf,wDCHA,wCAKA,IAAME,EAAc,uCAIL,SAASC,EACtBC,EACAnB,GAEAA,EAAcoB,WAAWH,EAAaI,IAAY,KAAK,GAAO,GAE9D,IAAIC,EAAS,GAGb,OAFAA,GAAM,8CAA2CL,EAA3C,kBAEFjB,EAAcuB,QAAQC,QACjBC,EAAWN,EAASnB,GAAeE,MAAK,YAA4B,IAAzBc,EAAwB,EAAxBA,IAAKD,EAAmB,EAAnBA,aAIrD,OAHAO,GAAM,mCAAgCI,KAAKC,UAAUX,GAA/C,cACNM,GAAM,2BAAwBI,KAAKC,UAAUZ,GAAvC,KAECa,QAAQC,QAAQ,CAAEC,eAAgBR,QAI7CA,GAAM,mCAAgCI,KAAKC,UAAUR,GAA/C,UAECS,QAAQC,QAAQ,CAAEC,eAAgBR","file":"static/js/css-loader.fb26dd5ca.chunk.js","sourcesContent":["module.exports = \"/* eslint-disable */\\n/*\\n\\tMIT License http://www.opensource.org/licenses/mit-license.php\\n\\tAuthor Tobias Koppers @sokra\\n*/\\n// css base code, injected by the css-loader\\nmodule.exports = function(useSourceMap) {\\n  var list = [];\\n\\n  // return the list of modules as css string\\n  list.toString = function toString() {\\n    return this.map(function(item) {\\n      var content = cssWithMappingToString(item, useSourceMap);\\n      if (item[2]) {\\n        return '@media ' + item[2] + '{' + content + '}';\\n      } else {\\n        return content;\\n      }\\n    }).join('');\\n  };\\n\\n  // import a list of modules into the list\\n  list.i = function(modules, mediaQuery) {\\n    if (typeof modules === 'string') modules = [[null, modules, '']];\\n    var alreadyImportedModules = {};\\n    for (var i = 0; i < this.length; i++) {\\n      var id = this[i][0];\\n      if (typeof id === 'number') alreadyImportedModules[id] = true;\\n    }\\n    for (i = 0; i < modules.length; i++) {\\n      var item = modules[i];\\n      // skip already imported module\\n      // this implementation is not 100% perfect for weird media query combinations\\n      //  when a module is imported multiple times with different media queries.\\n      //  I hope this will never occur (Hey this way we have smaller bundles)\\n      if (typeof item[0] !== 'number' || !alreadyImportedModules[item[0]]) {\\n        if (mediaQuery && !item[2]) {\\n          item[2] = mediaQuery;\\n        } else if (mediaQuery) {\\n          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';\\n        }\\n        list.push(item);\\n      }\\n    }\\n  };\\n  return list;\\n};\\n\\nfunction cssWithMappingToString(item, useSourceMap) {\\n  var content = item[1] || '';\\n  var cssMapping = item[3];\\n  if (!cssMapping) {\\n    return content;\\n  }\\n\\n  if (useSourceMap && typeof btoa === 'function') {\\n    var sourceMapping = toComment(cssMapping);\\n    var sourceURLs = cssMapping.sources.map(function(source) {\\n      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\\n    });\\n\\n    return [content]\\n      .concat(sourceURLs)\\n      .concat([sourceMapping])\\n      .join('\\\\n');\\n  }\\n\\n  return [content].join('\\\\n');\\n}\\n\\n// Adapted from convert-source-map (MIT)\\nfunction toComment(sourceMap) {\\n  // eslint-disable-next-line no-undef\\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\\n  var data =\\n    'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\\n\\n  return '/*# ' + data + ' */';\\n}\\n\"","import { LoaderContext } from 'sandpack-core/lib/transpiled-module';\n\nlet core = null;\n\nexport default async (code: string, loaderContext: LoaderContext) => {\n  if (!core) {\n    const Core = await import(\n      /* webpackChunkName: 'css-modules-loader-core' */ 'css-modules-loader-core'\n    ).then(x => x.default);\n\n    core = new Core();\n  }\n\n  const { injectableSource, exportTokens } = await core.load(\n    code,\n    loaderContext.path,\n    async (dependencyPath: string) => {\n      await loaderContext.addDependency(dependencyPath);\n\n      const tModule = loaderContext.resolveTranspiledModule(dependencyPath);\n\n      return tModule.source ? tModule.source.compiledCode : tModule.module.code;\n    }\n  );\n\n  return {\n    css: injectableSource,\n    exportTokens,\n  };\n};\n","import { LoaderContext } from 'sandpack-core/lib/transpiled-module';\n// @ts-ignore\nimport CSSBaseRaw from '!raw-loader!./client/css-base';\n\nimport getModules from './get-modules';\n\nconst CSSBasePath = '/node_modules/css-loader/css-base.js';\n\nconst getStyleId = id => id + '-css'; // eslint-disable-line\n\nexport default function transpile(\n  content: string,\n  loaderContext: LoaderContext\n) {\n  loaderContext.emitModule(CSSBasePath, CSSBaseRaw, '/', false, false);\n\n  let result = '';\n  result += `exports = module.exports = require(\"${CSSBasePath}\")(false);\\n\\n`;\n\n  if (loaderContext.options.modules) {\n    return getModules(content, loaderContext).then(({ css, exportTokens }) => {\n      result += `exports.push([module.id, ${JSON.stringify(css)}, \"\"])\\n\\n`;\n      result += `exports.locals = ${JSON.stringify(exportTokens)};`;\n\n      return Promise.resolve({ transpiledCode: result });\n    });\n  }\n\n  result += `exports.push([module.id, ${JSON.stringify(content)}, \"\"])`;\n\n  return Promise.resolve({ transpiledCode: result });\n}\n"],"sourceRoot":""}